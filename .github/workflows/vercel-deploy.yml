name: Deploy to Vercel with Approval

on:
  push:
    branches: [ main ]

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  notify-approvers:
    runs-on: ubuntu-latest
    steps:
      - name: Send Approval Requests
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "Deployment Approval Required for ${{ github.repository }}"
          body: |
            New changes to main branch (Commit: ${{ github.sha }})
            
            Review changes:
            ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}
            
            Approve deployment:
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            Post-approval deployment will commence automatically.
          to: ${{ secrets.APPROVER_EMAIL_1 }},${{ secrets.APPROVER_EMAIL_2 }}
          from: "GitHub Actions <${{ secrets.MAIL_USERNAME }}>"

  approval:
    needs: notify-approvers
    runs-on: ubuntu-latest
    environment: 
      name: production
    steps:
      - run: |
          echo "Deployment approved by: ${{ github.actor }}"
          echo "Proceeding with deployment..."

  deploy:
    needs: approval
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: ${{ steps.vercel-deploy.outputs.url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Deploy to Vercel
        id: vercel-deploy
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          npx vercel deploy --token=${{ secrets.VERCEL_TOKEN }} --prod --yes
          DEPLOY_URL=$(npx vercel --token=${{ secrets.VERCEL_TOKEN }} --prod)
          echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT

      - name: Verify Deployment
        run: |
          DEPLOY_URL="${{ steps.vercel-deploy.outputs.url }}"
          MAX_RETRIES=5
          COUNT=0
          
          while [ $COUNT -lt $MAX_RETRIES ]; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOY_URL")
            if [ "$HTTP_STATUS" = "200" ]; then
              echo "‚úÖ Deployment verified successfully"
              break
            fi
            echo "Waiting for deployment to be ready... (Attempt $((COUNT+1))/$MAX_RETRIES)"
            sleep 10
            COUNT=$((COUNT+1))
          done
          
          if [ $COUNT -eq $MAX_RETRIES ]; then
            echo "‚ùå Deployment verification failed after $MAX_RETRIES attempts"
            exit 1
          fi

      - name: Send Success Email
        if: success()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: "‚úÖ Deployment Success - ${{ github.repository }}"
          body: |
            Production deployment succeeded!
            
            Details:
            ‚Ä¢ Repository: ${{ github.repository }}
            ‚Ä¢ Branch: ${{ github.ref_name }}
            ‚Ä¢ Commit: ${{ github.sha }}
            ‚Ä¢ Approved by: ${{ github.actor }}
            ‚Ä¢ Live URL: ${{ steps.vercel-deploy.outputs.url }}
            
            View deployment: ${{ steps.vercel-deploy.outputs.url }}
            View changes: ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}
          to: ${{ secrets.APPROVER_EMAIL_1 }},${{ secrets.APPROVER_EMAIL_2 }}
          from: "GitHub Actions <${{ secrets.MAIL_USERNAME }}>"

      - name: Create Deployment Comment
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.name,
                issue_number: context.issue.number,
                body: `üöÄ Deployment succeeded!\n\n‚Ä¢ Commit: \`${context.sha}\`\n‚Ä¢ Approved by: ${context.actor}\n‚Ä¢ Live URL: ${process.env.DEPLOY_URL}`
              });
            } catch (error) {
              console.log('Skipping PR comment - not a pull request context');
            }
        env:
          DEPLOY_URL: ${{ steps.vercel-deploy.outputs.url }}